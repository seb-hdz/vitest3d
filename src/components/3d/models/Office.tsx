/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/WawaOffice.glb 
*/

import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import { useLayoutEffect, useRef } from "react";
import { BufferGeometry, Group, NormalBufferAttributes } from "three";
import { Object3D, Object3DEventMap } from "three";

type Geometry = BufferGeometry<NormalBufferAttributes>;

interface ExtendedNode extends Object3D<Object3DEventMap> {
  geometry?: Geometry;
}

const FLOOR_HEIGHT = 2.3;
const N_FLOORS = 3;

export const Office = (props: object) => {
  const { nodes, materials } = useGLTF("./models/WawaOffice.glb");
  const ref = useRef<Group<Object3DEventMap>>(null);
  const timelineRef = useRef<gsap.core.Timeline>();

  const office: ExtendedNode = nodes["01_office"];
  const library: ExtendedNode = nodes["02_library"];
  const attic: ExtendedNode = nodes["03_attic"];

  const scroll = useScroll();

  useFrame(() => {
    timelineRef.current?.seek(scroll.offset * timelineRef.current.duration());
  });

  useLayoutEffect(() => {
    timelineRef.current = gsap.timeline();

    // vertical animation
    if (!ref.current) return;
    timelineRef.current.to(
      ref.current.position,
      {
        duration: 2,
        y: -FLOOR_HEIGHT * (N_FLOORS - 1),
      },
      0
    );
  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh geometry={office.geometry} material={materials["01"]} />
      <group position={[-1.97, 4.227, -2.199]}>
        <group>
          <mesh
            geometry={library.geometry}
            material={materials["02"]}
            position={[0, 2.114, -2.23]}
          />
        </group>
      </group>
      <group position={[-1.97, 4.227, -2.199]}>
        <mesh geometry={attic.geometry} material={materials["03"]} />
      </group>
    </group>
  );
};

useGLTF.preload("/WawaOffice.glb");
